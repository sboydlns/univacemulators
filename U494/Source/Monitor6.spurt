#C-CONTROL
#OUTPUTS*125*133*7
CHAN#ALLOCATION
CHAN#200
MONITOR#75000
..
M0NIT0R#PROGRAM
M0NIT0R#PR0GRAM*MENNINGEN*40CT1967
MTU#MEANS*C6
KEY#MEANS*C4
TYPEACTIVE#MEANS*C4ACTIVE0UT
KEYWAIT#MEANS*C4ACTIVEIN
MTUWAIT#MEANS*C6ACTIVEIN
KEYEI#EQUALS*24
MTUEI#EQUALS*26
RTC#EQUALS*160
M0NIT0R#6601175000*
#RJP*SRSAVE
#ENT*Q*W(M0NIT0R1)*SKIP
M0NIT0R1#JP*M0NIT0R#1232 EXT INT ENTRANCE
#STR*Q*W(KEYEI)#L0AD INT ENT
#ENT*B1*2
#ENT*Q*W(M0NITOR2+B1)
#STR*Q*W(B1)
#RJP*SRESTORE
#77400*0
#EX-C0M*KEY*W(TYPE)#TURN 0N 1232
#ENT*A*74230
#STR*A*U(KEYIN+5)
#ENT*Q*L(MARK2+1)
#SUB*Q*20#CHAN N0
#RJP*ICH7#CHAN T0 FD
#STR*A*Q
#C0M*MASK*-700*AN0T#SUPPRESS MS ZERO
#SEL*CL*X77700*SKIP
#SEL*CL*X70000
#STR*A*W(LINE1+2)#SET CHAN
PACK#ENT*Q*LINE1#M0NIT0R
#RJP*PRINT
#ENT*B1*4
#CL*W(PACK5)
PACK1#RJP*KEYIN
#ENT*Y-Q*56*ANOT#PR0CEED TO C0DE
#JP*PACK4#EXIT
#ENT*Y-Q*77*AN0T
#JP*PACK
PACK2#ENT*A*W(PACK5)
#LSH*A*6
#ADD*LP*77
#STR*A*W(PACK5)
#BJP*B1*PACK1
PACK3#RJP*KEYIN#GET PR0CEED C0DE
#ENT*Y-Q*77*ANOT
#JP*PACK
#ENT*Y-Q*56*AZER0#WAIT F0R C0DE
#JP*PACK3
PACK4#ENT*Q*W(PACK5)
#ENT*B1*50D
M0NIT0R6#ENT*Y-Q*W(TABLE+B1)*AN0T
#JP*U(SELECTED+B1)
#BJP*B1*M0NIT0R6
#JP*M0NIT0R#ILLEGAL ENTRY
PACK5#0*
M0NIT0R2#RJP*FAULT
M0NIT0R3#JP*PTHAND
M0NIT0R4#JP*MANIANDC
KEYM0D#RPL*Y+1*U(MANFLG)
#ENT*Q*LINE5#KEY
#RJP*PRINT
#RJP*NUMBERA
#JP*MARK0+4#L0AD THIS M0D
PRINT#ENTRY*#1232 PRINTER R0UTINE
#STR*B2*W(W0RD)*#TEMP SAVE
#STR*Q*L(PRINT1)
#ENT*B2*4
PRINT1#ENT*Q*W(0)
#CL*A
#LSH*AQ*6*ANOT
#JP*PRINT2+1
#COM*A*77*YMORE
#JP*PRINT3
#STR*A*L(SRESTORE)
#OUT*KEY*W(PRINT5)
PRINT2#JP*PRINT2*TYPEACTIVE
#BJP*B2*PRINT1+1
#RPL*Y+1*L(PRINT1)
#JP*PRINT1-1
PRINT3#ENT*B2*W(WORD)
#EXIT
PRINT5#U-TAG*SRESTORE*SRESTORE
PUNCH#15*
TYPE#33*
RDCODE#153*     
RDTAPE#50*
RDENAB#150*
SRSAVE#ENTRY*#SAVE SR0
#STR*Q*W(SRSAVE1)
#7770000000*#SR0 TO Q
#STR*Q*L(SRESTORE+1)
#7760000000*#0 TO SR0
#ENT*Q*W(SRSAVE1)
#STR*B1*W(SRSAVE2)
#EXIT*
SRSAVE1#0*
SRSAVE2#0*
SRESTORE#ENTRY*#RESTORE SR0
#7760000000*#Y TO SR0
#ENT*B1*W(SRSAVE2)
#EXIT*
EEXP#ENTRY*#TEST FOR 17 BIT MODE
#COM*A*W(EEXP1)*YLESS
#EXIT
#STR*B1*W(SRSAVE)
#JP*EEXP+7#FIRST ENTRY
#PUT*W(RTC)*W(SRESTORE)
#7775000000*#E*EXP
#ENT*B1*77777
#BSK*B1*2
#ENT*A*B1
#ENT*B1*W(SRSAVE)
#EXIT*ANOT#17 BIT MODE OK
#ENT*Q*LINE16#EN 17 BIT MODE SWITCH
#ENT*A*W(RTC)#SPACE PRINTOUTS
#SUB*A*W(SRESTORE)
#SUB*A*10000*APOS#POS MEANS EXPIRED
#JP*EEXP+7#TRY AGAIN
#RJP*PRINT
#JP*EEXP+5#TRY AGAIN
EEXP1#100000*
KEYIN#ENTRY*#ACCEPT KEYBOARD ENTRIES
#RJP*READ#GET 1 CHAR
#ENT*Q*W(SRESTORE)
#ENT*Y-Q*76*ANOT#WAS MONITOR REQUESTED
#JP*MONITOR
#OUT*KEY*W(PRINT5)#TYPE SAME CHAR AS ENTERED
#ENT*Y-Q*5*AZERO
#EXIT*
#JP*KEYIN+1#IGNORE SPACE CODES
READ#ENTRY*#INPUT 1 CHAR
#IN*KEY*W(PRINT5)
READ1#JP*READ1*KEYWAIT
#ENT*A*W(SRESTORE)
#SEL*CL*77700#LOOK AT SIX BITS ONLY
#EXIT*
NUMB1#ENTRY*
#RJP*KEYIN
#ENT*Y-Q*41*ANOT
#STR*Q*CPW(SRSAVE)
#ENT*Y-Q*56*ANOT
#JP*NUMBER3
NUMB2#EXIT*
#ENT*Y-Q*77*AZERO#TEST ARROW
#EXIT*
#ENT*A*U(RBLOD2+2)*ANOT
#JP*NUMBER+1
#ENT*A*W(NUMBERA)
#STR*A*Q
#SUB*Q*SEARCH1-10*QZERO
#SUB*A*3*SKIP
#SUB*A*7
#JP*A      
NUMBERA#ENTRY*
#ENT*Q*W(FDLOD5-2)
#STR*Q*W(NUMB2)
#RPL*Y+1*U(RBLOD2+2)
#RJP*NUMBER
#ENT*Q*W(NUMB2+2)#RESTORE EXIT
#STR*Q*W(SRSAVE)
#EXIT*
NUMBER#ENTRY*#ASSEMBLE OCTAL NUMBER
#CL*W(EEXP)
#CL*W(SRSAVE)
#RJP*NUMB1
#CL*B2
NUMBER1#ENT*Y-Q*60+B2*ANOT
#JP*NUMBER2#OK, IT IS A DIGIT
#BSK*B2*7
#JP*NUMBER1
#JP*NUMBER+3#NOT A DIGIT
NUMBER2#ENT*A*W(EEXP)
#LSH*A*3
#SEL*SET*B2
#STR*A*W(EEXP)
#BSK*B1*11
#JP*NUMBER+3#GET MORE DIGITS
NUMBER3#ENT*A*W(EEXP)
#ENT*Q*W(SRSAVE)*QPOS
#CP*A*SKIP
#EXIT*
#STR*A*W(EEXP)
#EXIT*
ADDRESSES#ENTRY*#REQUEST AND GET START/END ADRS
#RJP*CHECKSUM4
#ENT*Q*LINE6#START
#RJP*PRINT
#RJP*NUMBERA
#STR*A*W(INPUT+B3)
#ENT*Q*LINE7#END
#RJP*PRINT
#RJP*NUMBERA
#STR*A*W(INPUT+1+B3)#TERM ADR
#COM*A*W(INPUT+B3)*YLESS#TEST TA LESS THAN TA
#JP*ADDRESSES1
#RJP*EEXP#TEST 17 BIT MODE
#ENT*B7*W(INPUT+B3)#INITIAL ADR
#EXIT*
ADDRESSES1#ENT*Q*LINE20#FORMAT ERROR
#RJP*PRINT
#JP*ADDRESSES+1
BLOCKS#ENTRY*#SET UP MULTIPLE BLOCKS
#ENT*A*LINE2#NO OF AREAS
#RJP*PRINT
#RJP*NUMBERA
#JP*BLOCKS+1*AZERO#NO AREAS ILLEGAL
#LSH*A*1*AZERO
#SUB*A*1
#STR*A*L(BLOCKS2)#SET NO OF AREAS
#CL*B3
BLOCKS1#RJP*ADDRESSES
#INCREMENT*B3*+1
BLOCKS2#BSK*B3*0#TEST DONE
#JP*BLOCKS1#ANOTHER BLOCK
#EXIT*
CRLF#ENTRY*
#ENT*Q*LINE2-1
#RJP*PRINT
#EXIT*
LEADER#ENTRY*#ROUTINE TO PUNCH LEADERS
#EX-COM*KEY*W(PUNCH)
#CL*W(SRESTORE)
#ENT*B1*150D
LEADER1#OUT*KEY*W(PRINT5)
LEADER2#JP*LEADER2*TYPEACTIVE
#BJP*B1*LEADER1
#EXIT*
WORD#ENTRY*#ASSEMBLE 5 FRAMES AS CPTR WORD
#ENT*B1*4#PUT WORD IN Q
WORD1#RJP*READ#GET 1 FRAME
#LSH*A*30
#LSH*AQ*6
#BJP*B1*WORD1
#EXIT*
CHECK#ENTRY*#ASSURE MONITOR WONT BE WIPED OUT
#RJP*SRSAVE
#ENT*A*W(167)
#RJP*EEXP#TEST 17 BIT MODE
#ENT*A*MONITOR-1
#ENT*Q*LAST
#COM*AQ*B7*YOUT
#JP*CHECK1
#ENT*Q*W(SRSAVE1)#RESTORE Q
#STR*Q*W(B7)#STORE THIS DATA
#RJP*SRESTORE
#EXIT*#ADDRESS IS OK
CHECK1#ENT*Q*MONITOR
#RJP*ICH7
#STR*A*W(LINE12+1)
#ENT*Q*LAST
#RJP*ICH7
#STR*A*W(LINE12+3)
#ENT*Q*LINE12#HIGHEST ALLOWABLE ADDRESS IS
#JP*STORE3#RETURN TO MONITOR
ICH1#RJP*ICH10#PRINT ADDRESS
ICH2#RJP*KEYIN#INSPECT AND CHANGE ROUTINE
#ENT*Y-Q*56*AZERO#PROCEED CODE
#JP*ICH6
#ENT*A*W(167)
#RJP*EEXP#TEST 17-BIT MODE
#RJP*ICH11#PRINT CONTENTS
ICH3#RJP*KEYIN#GET FUNCTION CODE
#ENT*Y-Q*56*AZERO#PROCEED CODE
#JP*ICH5#IS IT CHANGE CODE
ICH4#INCREMENT*B7*+1
#JP*ICH1
ICH5#ENT*Y-Q*74*AZERO#CHANGE CONTENTS
#JP*ICH3
#LSH*A*0*SKIP
#JP*ICH1#RETURN TO PRINT ADDRESS
#NO-OP*
#RJP*NUMBERA
#ENT*Q*W(EEXP)
#RJP*CHECK#STORE CONTENTS
#JP*ICH4
ICH6#ENT*Y-Q*74*AZERO#CHANGE ADDRESS
#JP*ICH2
#RJP*CRLF
#NO-OP*
#RJP*NUMBERA
#RJP*SRSAVE
#STR*A*W(167)
#RJP*SRESTORE
#JP*ICH3-3
ICH7#ENTRY*#5 OCTAL DIGITS TO FD CODE
#CL*A#DATA IS IN Q
#STR*B1*W(ICH12)
#ENT*B1*4
#LSH*Q*17*SKIP
ICH8#LSH*A*3
#LSH*AQ*3
#SEL*SET*60
#BJP*B1*ICH8
#ENT*B1*W(ICH12)
#EXIT*
ICH10#ENTRY*#PRINT CR, LF, 5 DIGITS
#RJP#CRLF
#ENT*A*B7
#SEL*CL*77777*AZERO#TEST 6TH DIGIT
#RJP*ICH12#PRINT MS DIGIT
#ENT*Q*B7
#RJP*ICH7
#STR*A*W(LINE3+3)
#ENT*Q*LINE3+3
#RJP*PRINT
#EXIT*
ICH11#ENTRY*#PRINT SP, 5 DIGITS, SP, 5 DIGITS
#ENT*A*B7
#RJP*ICH13
#RJP*ICH7
#LSH*Q*17
#STR*A*W(LINE3+3)
#RJP*ICH7
#STR*A*W(LINE3+1)
#ENT*Q*LINE3
#RJP*PRINT
#EXIT*
ICH12#ENTRY*
#RSH*A*15D
#SEL*CL*X77770
#ADD*A*60
#STR*A*W(LINE3+3)
#ENT*Q*LINE3+3
#RJP*PRINT
#EXIT*
ICH13#ENTRY*#ENTER Q WITH ADR OF A
#RJP*SRSAVE
#ENT*B7*A
#ENT*Q*W(B7)
#RJP*SRESTORE
#EXIT*
MANIANDC#STR*B7*W(INPUT+3)#SAVE B7
#STR*A*W(INPUT+1)#SAVE ADR
#JP*MANIANDC0*KEY1#PRINT AND/OR PUNCH
#JP*MANIANDC2*KEY2#PUNCH ONLY
#ENT*A*MANIANDC3#MANUAL ONLY
#STR*A*W(INPUT)#SET UP PATH
#JP*MANIANDC3#PROCEED
MANIANDC0#JP*MANIANDC1*KEY2#TEST PUNCH
#EX-COM*KEY*W(TYPE)
#ENT*A*MANIANDC6#SET UP PATH
#JP*MANIANDC0-2#PROCEED
MANIANDC1#ENT*Q*17*SKIP
MANIANDC2#ENT*Q*15#PUNCH ONLY EF
#STR*Q*W(CHECKSM2)
#RJP*LEADER*KEY2#PUNCH LEADER
#EX-COM*KEY*W(CHECKSM2)
#ENT*Q*LINE18
#RJP*PRINT#PRINT/PUNCH HEADER
#RJP*CHECKSUM4
#JP*MANIANDC1-2
MANIANDC3#ENT*A*W(INPUT+11)
#RJP*EEXP#TEST 17-BIT MODE
#ENT*A*W(INPUT+1)#DISPLAY ADR
#RJP*ICH13
#STR*Q*W(SEARCH3)
#ENT*B7*W(INPUT+3)#RESTORE B7
#JP*MANIANDC4*STOP
MANIANDC4#STR*B7*W(INPUT+3)
#ENT*B7*W(INPUT+1)#ADR REQUESTED
#RJP*SRESTORE
#STR*Q*W(B7)#NEW/OLD CONTENTS
#RJP*SRESTORE
#STR*A*W(INPUT+2)#MAYBE NEW ADR
#SUB*A*W(INPUT+1)*AZERO#PREVIOUS ADR
#ENT*A*W(INPUT+2)*SKIP#USE NEW ADR
#RPL*Y+1*W(INPUT+1)*SKIP#UPDATE LAST ADR
#STR*A*W(INPUT+1)#NEXT ADR
#JP*W(INPUT)#PATH MANIANDC 3, 5 OR 6
MANIANDC5#RJP*DMPFD1#PUNCH CHECK SUMS
#RJP*LEADER
#RJP*LEADER
#EX-COM*KEY*W(NUMBER3-2)#TURN OFF 1232
#JP*MANIANDC*STOP
MANIANDC6#RJP*ICH10#PRINT OR PUNCH ADR
#RJP*ICH11#PRINT OR PUNCH NEW CONTENTS
#RJP*CHECKSM#FORM CHECKSUM
#ENT*B7*SEARCH3
#RJP*ICH11#PRINT OR PUNCH OLD CONTENTS
#JP*MANIANDC5*KEY3#FINALIZE
#JP*MANIANDC3
STORE#ENT*Q*LINE11#CONSTANT
#RJP*PRINT
#RJP*NUMBERA
#STR*A*W(SEARCH3)
#CL*B3
#RJP*ADDRESSES
#ENT*Q*W(SEARCH3)#RETRIEVE CONSTANT
STORE2#STR*B7*W(INPUT)#SAVE ADR
#RJP*CHECK
#ENT*B7*W(INPUT)
#BSK*B7*W(INPUT+1)#TERM ADR
#JP*STORE2
#ENT*Q*LINE7#END
STORE3#RJP*PRINT
#RJP*SRESTORE
#JP*MONITOR
ENTER#ENT*Q*LINE10+2#ADR
#RJP*PRINT
#RJP*NUMBERA
#RJP*SRESTORE
#RILJP*A
SEARCH#RPL*Y+1*L(FDFLG)#CL HIT FLAG
#ENT*Q*LINE4#MASK
#RJP*PRINT
#RJP*NUMBERA
#STR*A*W(SEARCH3)*SKIP#MASK
#RJP*PRINT#FORMAT ERROR
#ENT*Q*LINE5#KEY
#RJP*PRINT
#RJP*NUMBERA
#ENT*Q*W(SRSAVE)*QPOS
#STR*A*CPW(SEARCH4)*SKIP#YES
#STR*A*W(SEARCH4)*SKIP#LOWER LIMIT OF KEY
#RJP*NUMBERA
#STR*A*W(SEARCH5)#UPPER LIMIT OF KEY
#ENT*Q*LINE20#FORMAT ERROR
#SUB*A*W(SEARCH4)*APOS#TEST RANGE
#JP*SEARCH+5
#CL*B3
#RJP*ADDRESSES#GET LIMITS
#RJP*SRSAVE
#ENT*Q*W(SEARCH3)#MASK TO Q
SEARCH1#ENT*A*B7
#SUB*A*1*ANOT
#JP*SEARCH0*AZERO
#ENT*LP*W(SEARCH4)#KEY
#COM*MASK*W(B7)*ANOT#DATA
#JP*SEARCH2
SEARCH0#BSK*B7*W(INPUT+1)#TERM ADR
#JP*SEARCH1-1
#ENT*A*W(SEARCH5)
#SUB*A*W(SEARCH4)*ANOT
#JP*SEARCH6
#RPL*Y+1*W(SEARCH4)#UPDATE KEY
#ENT*B7*W(INPUT)#RESET IA
#JP*SEARCH1-1
SEARCH6#ENT*A*L(FDFLG)*AZERO#HIT FLAG
#ENT*Q*LINE9*SKIP#NO FIND
#ENT*Q*LINE8#END SEARCH
#JP*STORE3#RETRUN TO MONITOR
SEARCH2#RJP*ICH10
#RJP*ICH11
#CL*L(FDFLG)#SET HIT FLAG
#JP*SEARCH0
CHECKSM2#0*#LOADED UPPER
CHECKSM3#0*#LOADED LOWER
SEARCH3#0*#MASK OR TAPE UPPER
SEARCH4#00*#KEY OR TAPE LOWER
SEARCH5#0*0#FOR SEARCHING RANGE OF KEYS
CHECKSUM4#ENTRY*
#CL*W(CHECKSM2)
#CL*W(CHECKSM3)
#EXIT*
CHECKSM#ENTRY*#ADD TO CHECK SUMS
#ENT*A*U(B7)
#RPL*A+Y*W(CHECKSM3)
#ENT*A*L(B7)
#RPL*A+Y*W(CHECKSM2)
#EXIT*
PTHAND#JP*VERPT*KEY1
#JP*MANDUMP*KEY2
#JP*MANDUMP*KEY3
#JP*LODPT
MANDUMP#JP*MANDUMP+1*STOP
#STR*A*W(INPUT)#INITIAL ADR
#STR*Q*W(INPUT+1)#TERM ADR
#ENT*A*1
#STR*A*L(BLOCKS2)
#JP*DMPAB+2*KEY2
PCHFD#RPL*Y+1*L(FDFLG)*SKIP#SET LEADER FLAG
TYPFD#CL*L(FDFLG)#CLEAR LEADER FLAG
#ENT*A*505
#STR*A*W(LINE3)
#ENT*B7*W(INPUT)
#JP*DMPFD-5*KEY3
#CL*B3
#RJP*ADDRESSES#IA TO B7
#ENT*A*L(FDFLG)*AZERO
#RJP*LEADER*ANOT
#ENT*Q*LINE18*AZERO#FD HEADER
#RJP*PRINT
#RJP*SRSAVE
DMPFD#ENT*A*L(FDFLG)*ANOT#TEST PUNCH
#ENT*A*W(B7)*AZERO#ZERO SUPPRESS
#ENT*A*B7*SKIP#PROCEED
#JP*DMPFD0#NEXT WORD
#SEL*CL*X77770*ANOT
#RJP*CRLF
#RJP*SRESTORE
#RJP*ICH10#OUTPUT THE ADDRESS
#RJP*ICH11#OUTPUT THE CONTENTS
#RJP*CHECKSM#ADD TO CHECK SUMS
DMPFD0#BSK*B7*W(INPUT+1)#TERM ADR
#JP*DMPFD
#RJP*DMPFD1
#ENT*A*L(FDFLG)*AZERO
#RJP*LEADER
#RJP*LEADER*ANOT
#JP*MONITOR
DMPFD1#ENTRY*
#ENT*Q*LINE19#PERIODS
#RJP*PRINT
#CL*W(LINE3)#CLEAR SPACES
#RJP*CRLF
#ENT*B7*CHECKSM3
#RJP*ICH11#OUTPUT THE LOWER CHECK SUM
#RJP*CRLF
#ENT*B7*CHECKSM2
#COMMENT*I DON'T KNOW WHAT THE FOLLOWING CRUFT IS. IT LOOKS
#COMMENT*LIKE SOME KIND OF CORRUPTION.
#COMMENT*..C
#COMMENT*60353 23
#COMMENT*   132
#RJP*ICH11#OUTPUT THE UPPER CHECK SUM
#ENT*A*505
#STR*A*W(LINE3)
#EXIT*
DMPAB#RJP*SRSAVE
#RJP*BLOCKS#GET AREAS TO DUMP
#RJP*LEADER#PUNCH LEADER
DMPAB0#ENT*A*U(INPUT+B1)#B1 IS BLOCK LOCATOR
#LSH*A*3
#SEL*SET*U(INPUT+1+B1)
#STR*A*L(DMPAB1)*AZERO#ADR BITS 15 AND 16
#ENT*A*73*SKIP#17 BIT HEADER
#ENT*A*76#STANDARD HEADER
#RJP*DMPAB4#PUNCH HEADER
DMPAB1#ENT*A*0#ADR BITS 15 AND 16
#STR*A*W(SRESTORE)*AZERO
#OUT*KEY*W(PRINT5)#BANKS IF REQD
DMPAB2#JP*DMPAB2*TYPEACTIVE
#ENT*A*L(INPUT+B1)#INIT ADR
#LSH*A*15D
#SEL*SET*L(INPUT+1+B1)#TERM ADR
#RJP*DMPAB4#PUNCH LIMITS
#ENT*B7*W(INPUT+B1)#INITIAL ADR
#RJP*CHECKSUM4
DMPAB3#ENT*A*W(B7)
#RJP*DMPAB4#PUNCH DATA
#RJP*CHECKSM#ADD TO CHECK SUM
#BSK*B7*W(INPUT+1+B1)#TA
#JP*DMPAB3#NOT DONE YES
#ENT*A*W(CHECKSM2)#LOWER CS
#RJP*DMPAB4
#ENT*A*W(CHECKSM3)#UPPER CS
#RJP*DMPAB4
#INCREMENT*B1*+1
#BSK*B1*L(BLOCKS2)
#JP*DMPAB0#MORE BLICKS
#RJP*LEADER#ALL DONE
#RJP*LEADER
#RJP*SRESTORE
#JP*MONITOR
DMPAB4#ENTRY*#PUNCH CONTENTS OF A
#ENT*B2*4
DMPAB5#LSH*A*6
#STR*A*W(KEYIN)
#SEL*CL*X77700
#STR*A*W(SRESTORE)
#OUT*KEY*W(PRINT5)
DMPAB6#JP*DMPAB6*TYPEACTIVE
#ENT*A*W(KEYIN)
#BJP*B2*DMPAB5
#EXIT*
VERPT#RPL*Y+1*U(FDFLG)*SKIP#SET VERIFY FLAG
LODPT#CL*U(FDFLG)#LOAD TAPE ALL FORMATS
#RPL*Y+1*L(FDFLG)#CLEAR ERROR FLAG
#EX-COM*KEY*W(RDCODE)#TURN ON READER
#RJP*READ
#JP*LODPT+3*AZERO#PASS TRAILER
#RJP*CHECKSUM4
#CL*W(DMPAB4)
#CL*W(INPUT)
#CL*W(INPUT+1)
#RJP*SRSAVE
#ENT*A*77#MASK
#COM*MASK*76*ANOT#FIND HEADER
#JP*BLOD#BIOCTAL LOAD
#COM*MASK*75*ANOT#RELATIVE LOAD
#JP*RBLOD#RELATIVE LOAD
#COM*MASK*73*ANOT#EMU ABS LOAD
#JP*EMULOD
#COM*MASK*4*AZERO
#JP*FMERR#FORMAT ERROR
#RJP*READ
#COM*MASK*3*ANOT
#RJP*READ
#COM*MASK*70*AZERO#8HEADER
#COM*MASK*71*ANOT#9 HEADER
#JP*FDLOD
FMERR#ENT*Q*LINE20#FORMAT ERROR
#JP*STORE3#RETURN TO MONITOR
EMULOD#RJP*READ
#LSH*AQ*27D
#LSH*A*18D#SEPARATE BK LOCATORS
#STR*Q*U(INPUT)#BK FOR IA
#STR*A*W(INPUT+1)#BK FOR TA
#RJP#EEXP
BLOD#RJP*WORD#ABSOLUTE BIOCTAL LOAD
#STR*Q*L(INPUT+1)#TA
#LSH*Q*17
#STR*Q*L(INPUT)#TA
#ENT*B7*W(INPUT)#IA
BLOD1#RJP*WORD#ASSEMBLE 1 WORD
#ENT*A*U(FDFLG)*AZERO
#RJP*BLOD5*ANOT#VERIFY ONLY
#RJP*CHECK*AZERO#CHECK AND STORE
#RJP*CHECKSM#FORM CS
#BSK*B7*W(INPUT+1)#TA
#JP*BLOD1
#RJP*WORD#GET TAPE LOWER CHK SM
#STR*Q*W(SEARCH3)
#RPL*Y+Q*W(DMPAB4)#ADD BLKS CS TO TOTAL
#RJP*WORD#GET TAPE UPPER CHK SM
BLOD2#STR*Q*W(SEARCH4)
#RPL*Y+Q*W(DMPAB4)#ADD BLKS CS TO TOTAL
#ENT*Y-Q*W(CHECKSM3)*AZERO#COMPARE CHECK SUMS
#JP*BLOD4#CHK SUM ERROR UPPER
#ENT*Q*W(SEARCH3)#UPPER OK
#ENT*Y-Q*W(CHECKSM2)*AZERO#COMPARE CHECK SUMS
#JP*BLOD4#CHK SUM ERROR LOWER
BLOD3#RJP*WORD#GET NEXT HEADER
#RJP*CHECKSUM4
#SUB*Q*73*QNOT#IS IT ANOTHER EMU BLOCK
#JP*EMULOD#YES
#SUB*Q*2*QNOT#TEST REL BLOCK
#JP*RBLOD#ANOTHER REL BLOCK
#SUB*Q*1*QNOT
#JP*BLOD#ANOTHER ABS BLOCK
#RJP*SRESTORE
#ENT*A*L(FDFLG)*ANOT#1 IS NO ERROR
#JP*MONITOR#ERR OCCURRED
#ENT*A*U(FDFLG)*AZERO#1=VER, 0=LOAD
#ENT*Q*LINE13*SKIP#VERIFIED
#ENT*Q*LINE23#LOAD OK
#RJP*NF
#JP*STORE3
BLOD4#ENT*Q*LINE14#CHECK SUM ERROR
#RJP*PRINT
#ENT*Q*LINE21+3#MEM TAPE
#RJP*PRINT
#ENT*Q*LINE30#LOWER
#RJP*PRINT
#ENT*B7*CHECKSM2
#RJP*ICH11
#ENT*B7*SEARCH3
#RJP*ICH11
#RJP*CRLF
#ENT*Q*LINE15#UPPER
#RJP*PRINT
#ENT*B7*CHECKSM3
#RJP*ICH11
#ENT*B7*SEARCH4
#RJP*ICH11
#CL*L(FDFLG)
#JP*BLOD3
BLOD5#ENTRY*#USED IN VERIFY ONLY
#STR*Q*W(SEARCH3)#TAPE
#ENT*Q*W(B7)#MEM CONTENTS
#ENT*Y-Q*W(SEARCH3)*ANOT#TAPE CONTENTS
#JP*BLOD6+6#EXIT
#ENT*A*L(FDFLG)*ANOT#ERROR
#JP*BLOD6
#ENT*Q*LINE21#ERROR-ADR-MEM-TAPE
#RJP*PRINT
#CL*L(FDFLG)#ONLY ONE HEADER REQUIRED
BLOD6#RJP*ICH10#PRINT ADR
#RJP*ICH11#PRINT CONTENTS
#STR*B7*W(SEARCH4)#TEMP SAVE
#ENT*B7*SEARCH3
#RJP*ICH11#PRINT TAPE
#ENT*B7*W(SEARCH4)#RESTORE
#ENT*A*1#PRVENT ENTRY INTO CHECK
#EXIT*
RBLOD#EX-COM*KEY*W(TYPE)
#RJP*STATE8#GET BASE ADR
#EX-COM*KEY*W(RDTAPE)
RDWAIT#JP*RDWAIT*C4*COMACTIVE
#EX-COM*KEY*W(RDENAB)
#ENT*B7*W(DMPFD1)#INITIAL ADR
RBLOD0#CL*B1
#RJP*RBLOD9#GET 2 INSTRUCTIONS 2 CODES
RBLOD1#ENT*Q*W(RBLOD10+B1)#INSTRUCTION
#RPL*Y+Q*W(CHECKSM2)#ADD TO CHECK SUM
#ENT*B2*L(RBLOD10+B1)#MOD CODE
#ENT*A*LX(DMPFD1)
#JP*L(RBLOD2+B2)
RBLOD2#0*RBLOD5#NO MODIFICATION
#0*RBLOD3#MODIFY LOWER ADR
#0*RBLOD4#MODIFY UPPER ADR
#0*RBLOD6#MODIFY LOWER AND UPPER ADR
#0*RBLOD7#INCR
#0*RBLOD5#NOT USED
#0*RBLOD5#NOT USED
#0*RBLOD8#CHECK SUM FOLLOWS
RBLOD3#RPL*A+Y*LX(RBLOD10+1+B1)*SKIP
RBLOD4#RPL*A+Y*UX(RBLOD10+1+B1)
RBLOD5#ENT*Q*W(RBLOD10+1+B1)
#ENT*A*U(FDFLG)#VERIFY FLAG
#RJP*BLOD5*ANOT
#RJP*CHECK*AZERO#STORE WORD
#INCREMENT*B7*+1
RBLOD5A#INCREMENT*B1*+1
#BSK*B1*3
#JP*RBLOD1#LOAD NEXT INSTRUCTION
#JP*RBLOD0#ASSEMBLE 11 MORE FRAMES
RBLOD6#RPL*A+Y*LX(RBLOD10+1+B1)
#ENT*A*LX(DMPFD1)
#JP*RBLOD4
RBLOD7#STR*Q*L(RBLOD7+1)#NEW BLOCK
#INCREMENT*B7*+0
#JP*RBLOD5A
RBLOD8#ENT*A*W(CHECKSM2)
#SUB*A*W(RBLOD10+1+B1)
#STR*A*W(DMPAB4)#SAVE CS FOR NF
#SUB*A*W(RBLOD10+1+B1)*ANOT
#JP*BLOD3
#ENT*Q*LINE14
#RJP*PRINT#CHECK SUM ERROR
#ENT*Q*LINE21+4#MEMORY-TAPE
#RJP*PRINT
#ENT*B7*DMPAB4
#RJP*ICH11
#ENT*B7*RBLOD10+1+B1
#JP*BLOD5-3
RBLOD9#ENTRY*#ASSEMBLE 11 FRAMES
#RJP*WORD#5 FRAMES
#CL*A
#LSH*AQ*3
#STR*A*W(RBLOD10)
#STR*Q*W(RBLOD10+1)
#RJP*READ#1 FRAME
#RSH*AQ*3
#RSE*SET*W(RBLOD10+1)
#CL*A
#LSH*AQ*3
#STR*A*W(RBLOD10+2)
#RJP*WORD#5 FRAMES
#STR*Q*W(RBLOD10+3)
#EXIT*
RBLOD10#0*#MODE CODE
#0*#INSTRUCTION
#0*#MOD CODE
#0*#INSTRUCTION
FDLOD#RPL*Y+1*L(FDFLG1)#1=NOCHK SUM
#ENT*A*W(NUMB2+2)#RESTORE EXIT
#STR*A*W(NUMB2)
#CL*U(RBLOD2+2)
#RJP*READ#0=CHK SUM
#COM*MASK*70*AZERO#SECOND 8
#COM*MASK*71*ANOT
#CL*L(FDFLG1)#SECOND 9
#COM*MASK*4*AZERO
#JP*FDLOD+1
#ENT*A*12000
#STR*A*U(KEYIN+5)
FDLOD1#ENT*B1*5#PROCEED TO LOAD
#RJP*NUMBER
#ENT*B7*A#ADDRESS TO LOAD
#ENT*Q*77
#RJP*READ
#COM*MASK*5*ANOT#6 DIGITS
#JP*FDLOD0#NO
#SUB*A*60#YES
#STR*A*W(INPUT)
#ENT*A*B7
#LSH*A*3
#RSE*SET*W(INPUT)#FULL ADR
#RJP*EEXP#17-BIT MODE REQUIRED
#ENT*B7*W(INPUT)#SET ADR TO LOAD
FDLOD0#CL*B1
#RJP*NUMBER#DATA
#STR*A*Q
#ENT*A*U(FDFLG)*AZERO#VERIFY FLAG
#RJP*BLOD5*ANOT
#RJP*CHECK*AZERO#STORE
#RJP*CHECKSM#FORM CS
FDLOD2#RJP*FDLOD4#FIND CR
#RJP*READ
#COM*MASK*3*ANOT#IS LF FOUND
#RJP*READ#IGNORE LF
#COM*MASK*4*ANOT
#JP*FDLOD2+1#ANOTHER CR
#COM*MASK*75*AZERO#IS PERIOD FOUND
#JP*FDLOD5#NO
#RJP*READ#YES
#COM*MASK*75*AZERO#IS 2ND PERIOD FOUND
#JP*FDLOD2#NO
#ENT*A*L(FDFLG1)*AZERO#END OF LOAD
#JP*MONITOR
#RJP*FDLOD4#FIND CR
#RJP*NUMBER
#STR*A*W(SEARCH4)#UPPER CS
FDLOD3#RJP*FDLOD4#FIND CR
#RJP*NUMBER
#STR*A*W(SEARCH3)#LOWER CS
#RPL*A+Y*W(DMPAB4)#SAVE FOR NF
#ENT*Q*W(SEARCH4)
#JP*BLOD2
FDLOD4#ENTRY*
#RJP#READ
#ENT*A*77
#COM*MASK*4*AZERO
#JP*FDLOD4+1
#CL*B1
#EXIT*
FDLOD5#CL*W(EEXP)
#STR*A*Q
#ENT*A*FDLOD1+2
#STR*A*L(NUMBER)
#ENT*B1*5
#JP*NUMBER1-1
FDFLG#0*
FDFLG1#0*
NF#ENTRY*#PRINT NF NUMBER
#RJP*PRINT
#ENT*B7*W(DMPAB4)
#RJP*ICH10
#ENT*Q*LINE17
#EXIT*
TABLE#2510242536#PCOPY
#22122264*#MEM4
#2224271125*#MORDP
#6304161*#AS-1
#2116231231#LINET
#2124141610*#LOGIC
#22122311*#MEND
#331125#VDP
#6165646011*#1540D
#1024222536*#COMPY
#6162626211*#1222D
#1306272431*#FAROUT
#1624231610*#IONIC
#2206100607*#MACAB
#727061623*#BRAIN
#10123031#CEST
#1210210631*#ECLAT
#6162636022*#1230M
#161012*#ICE
#313136*#TTY
#113132*#DTU
#11257425#DP/P
#10101606#CCIA
#6165646025*#1540P
#6162646025*#1240P
#10252536*#COPY
#3427163112*#WRITE
#3112303130*#TESTS
#2124061125*#LOADP
#162310*#INC
#14243124*#GOTO
#3027101522*#SRCHM
#3312271236*#VERFY
#10150623*#CHAN
#11322225*#DUMP
#2532231015*#PUNCH
#2527162331*#PRINT
#3031242712*#STORE
#2124061122*#LOADM
#21163031*#LIST
#2106071221#LABEL
#1525416365#HP-35
#1610253127*#ICPTR
#2212222736*#MEMRY
#167424*#I/O
#22122263*#MEM3
#123025#ESP
#122725#ERP
#31270623#TRAN
#271210#REC
#3135666462#TX642
SELECTED#U-TAG*MARK0*2#PCOPY
#U-TAG*MARK0*-51#MEM4
#U-TAG*MARK0*-10#MORDP
#U-TAG*MARK0*4#AS-1
#U-TAG*MARK0*5#LINET
#U-TAG*MARK0*10#LOGIC
#U-TAG*MARK0*120#MEND
#U-TAG*MARK0*12#VDP
#U-TAG*MARK0*47#1540D
#U-TAG*MARK0*52#COMPY
#U-TAG*MARK0*45#1222D
#U-TAG*MARK0*20#FAROUT
#U-TAG*MARK0*34#IONIC
#U-TAG*MARK0*31#MACAB
#U-TAG*MARK0*32#BRAIN
#U-TAG*MARK0*13*CEST
#U-TAG*MARK0*21#ECCLAT
#U-TAG*MARK0*22#1230M
#U-TAG*MARK0*40#ICE
#U-TAG*MARK0*41#TTY
#U-TAG*MARK0*44#DTU
#U-TAG*MARK0*15#DP/P
#U-TAG*MARK0*14#CCIA
#U-TAG*MARK0*42#1540P
#U-TAG*MARK0*43#1240P
#U-TAG*MARK0-1*10700#COPY
#U-TAG*MARK0-1*-13000#WRITE
#U-TAG*MARK0-1*22000#TESTS
#U-TAG*LODPT*0#LOADP
#U-TAG*ICH6+2*0#ICH
#U-TAG*ENTER*0#GOTO
#U-TAG*SEARCH*0#SRCHM
#U-TAG*VERPT*0#VERPT
#U-TAG*MARK0-1*10200#CHAN
#U-TAG*DMPAB*0#DMPDB
#U-TAG*PCHFD*0#PCHFD
#U-TAG*TYPFD*0#TYPFD
#U-TAG*STORE*0#STORE
#U-TAG*KEYMOD*0#LOADM
#U-TAG*MARK0-1*10000#LIST
#U-TAG*MARK0*151#LABEL
#U-TAG*MARK0*150#HP-35
#U-TAG*MARK0*130#ICPTR
#U-TAG*MARK0*30#MEMRY
#U-TAG*MARK0*23#I/O
#U-TAG*MARK0*-50#MEMB
#U-TAG*MARK0*70#ESP
#U-TAG*MARK0*71#ERP
#U-TAG*MARK0*72#TRAN
#U-TAG*MARK0*73#REC
#U-TAG*MARK0*74#TX6432
LINE1#403222423*#MONITOR
#1631242741*
#0*#CHAN DIGITS SLOT
#40377
LINE2#403232405*#NO OF AREAS
#2413050627*
#1206300577*
LINE3#505*
#0*
#5*
#0*
#77*
LINE4#403052206*#MASK
#3020530577*
LINE5#403050520*#KEY
#1236530577*
LINE6#403303106*#START
#2731530577*
LINE7#403050512*#END
#2311530577*
LINE8#403050512*#END SEARCH
#530120627*
#10150477*
LINE9#403232405*#NO FIND
#1316231177*
LINE10#403070630*#BASE ADDRESS
#12*
#05061127*
#530577*
LINE11#403102423*#CONSTANT
#3031530577*
LINE12#403*#XXXXX TO YYYYY RESERVED
#0*
#5321405*
#0*
#0527123012*
#2733121177*
LINE13#403331227*#VERIFIED
#1613161211*
#77*
LINE14#403101512*#CHECK SUM ERROR
#1020050530*
#3222051227*
#2724270403*
#50577*
LINE15#3225251227*#UPPER
#77*
LINE16#403122305*#EN 17 BIT MODE
#6167410716*
#3105222411*
#1275050577*
LINE17#523130477*#NF
LINE18#403707077*#88
LINE19#403757577*#PERIODS
LINE20#403132427*#FORMAT ERROR
#2206310512*
#2727242777*
LINE21#403122727*#ERROR
#2427305304*#ADR   MEMROY  TAPE
#305061127*
#505050505*
#2212222427*
#3605050505*
#0505053106*
#2512040377*
LINE22#2224110500*#MOD
#0*
#77*
LINE23#403212406*#LOAD OK
#1105242077*
LINE24#521240611*#LOAD OK
#1211052420*
#77*
LINE25#403232431*#NOT IN CONTROL
#516230510*
#2423312724*
#210477*
LINE26#403201236*#KEY OF 0 IS ILLEGAL
#524130560*
#516300516*
#2121121406*
#210477*
LINE27#516222505*#IMP COND
#1024231104*
#77*
LINE28#513061621*#FAILED
#12110477*
LINE28A#0510300512*#CS ERR
#2727242777*
LINE29#510062372*#CAN*T FIND
#3105131623*
#110477*
LINE30#0505212434*#LOWER
#122777*
LINE32#513063221*#FAULT
#3177*
FAULT#ENTRY*
#STR*B7*W(PACK5)
#77400*0
#ENT*B7*W(FAULT)
#INCREMENT*B7*-1
#RJP*ICH10
#RJP*ICH11
#ENT*Q*LINE32
#ENT*B7*W(PACK5)
#JP*STORE3
..
LOADER#PROGRAM*MENNINGEN*7FEB1967
#COMMENT*#B1 ATTEMPTS
#COMMENT*#B2 INSTRUCTION POINTER
#COMMENT*#B3 INT FLAG
#COMMENT*#B4 BIAS SWITCH
#COMMENT*#B5 INSTRUCTION COUNTER
#COMMENT*#B7 MISC
LOADER#SIL-EX*ALL
#RPL*Y+1*U(MANFLG)#SET PRINTOUT FALG
#STR*A*L(MANFLG)
#JP*MARK1*STOP
#RPL*Y+1*L(LOADER)*SKIP
MARK0#CL*L(LOADER)
#ENT*A*LX(SELECTED+B1)
#STR*Q*W(SEARCH3)#SAVE MOD REQUESTED
#CL*U(MANFLG)
#CL*L(MANFLG)#THIRD ENTRY
#SIL-EX*ALL
MARK1#EX-COM*KEY*W(TYPE)
#JP*STATE2*AZERO#KEY OF 0 IS ILLEGAL
#STR*A*W(KEY)*APOS
#RJP*STATE8#GET BASE ADR
#ENT*Q*W(MARK2)*SKIP
MARK2#RJP*MAGINT
#STR*Q*W(MTUEI)*SKIP#LOAD IN ENT
REQUEST#4*11#REQUEST OR SELECT
#RIL-EX*MTU
#EX-COM*MTU*W(REQUEST)*FORCE#OR SELECT
#ENT*B1*70000
MARK3#BJP*B1*MARK3
#CL*W(ERRCT)
#RIL*
#EX-COM*MTU*W(CODES)*FORCE
#CL*B3
#RPT*48D*ADV#CLEAR BUFFER
#CL*W(INPUT+2)
MARK4#JP*MARK4+B3#WTFI
#CL*B1#RECORD OF FAILURE ATTEMPTS
#CL*B2#BLOCK LOCATOR
#CL*B3#INT FLAG
#CL*B4#BIAS SELECTOR
#EX-COM*MTU*W(SPACFIL)*FORCE
MARK5#JP*MARK5+B3#WTFI
#CL*U(DMPFD1)#CL MAGREL ERROR FLAG
#ENT*A*W(BUFIN)#ORIGINAL LIMITS
#STR*A*W(BUFIN0)#SET FIRST BUFFER LIMITS
#RJP*LOSCNTRL#TEST LOSS OF CONTROL
#ENT*LP*20*ANOT#FIND 1ST TM
#JP*STATE5#IMP CONDITION
#RJP*READ1540#GET KEY AND EXEC ADR, 2WDS
#RJP*CS#GET 2 CS WDS
#RJP*LOSCNTRL#TEST LOSS OF CONTROL
#ENT*LP*20*AZERO#TM
#JP*STATE7#2ND TM SO PRINT CANT FIND
#ENT*Q*LX(INPUT)#GET KEY READ
#SUB*Q*LX(KEY)*QZERO#SELECTED KEY
#JP*MARK4+1#NOT THIS MOD, TRY NEXT
#MOVE*2*INPUT*RBLOD10#SAVE KEY AND ADR
#ENT*A*W(INPUT)*ANEG#TEST FORMAT
#JP*MARK7B*APOS#ABSOLUTE
#JP*MAGREL#RELATIVE LOAD
MARK6#RJP*READ1540#GET LIMITS AND BANK
#ENT*A*L(INPUT+1+B2)#GET BANK NO
#ENT*Q*-3
#RSE*SU*L(MARK6+4)
#77610*06000#ENT*SR C6 YINPUT
#ENT*A*U(INPUT+B2)#TA
#SUB*A*LAST*APOS#IS IS ) LAST
#JP*CHECK1#ERROR
MARK6A#ENT*A*U(INPUT+B2)
#SUB*A*L(INPUT+B2)*APOS
#JP*MARK8#FORMAT ERROR
#IN*MTU*W(INPUT+B2)
MARK7#JP*MARK7+B3*MTUWAIT
#RJP*CS#GET 2 CS WDS
#RJP#LOSCNTRL#TEST LOSS OF CONTROL
#ENT*LP*20*AZERO#TEST EOF
#JP*MARK8+2#PRINT LOADED OK
#ENT*LP*3700*AZERO#TEST ERRS IN MTU
#JP*RECOVER2#FAILED
#ENT*Q*L(INPUT+1+B2)#GET BANK
#LSH*Q*15D
#ENT*A*L(INPUT+B2)
#STR*A+Q*W(RBLOD10+2)#FULL IA
#ENT*A*U(INPUT+B2)
#STR*A+Q*W(RBLOD10+3)#FULL TA
#RJP*EEXP#INSURE 17-BIT MODE
#RJP#SRSAVE
#ENT*B6*W(RBLOD10+2)#FULL IA
#CL*Q
#CL*A
RECOVER1#ADD*A*L(B6)#FIND CHECK SUM
#ADD*Q*U(B6)
#BSK*B6*W(RBLOD10+3)#FULL TA
#JP*RECOVER1
#RJP#SRESTORE
#SUB*Q*W(CS3)*QNOT#TEST CHECK SUMS
#SUB*A*W(CS2)*AZERO
#JP*RECOVER3#CS ERR
MARK7B#RPL*Y+1*U(BUFIN0)#INCR BLOCK LOC
#STR*A*L(BUFIN0)
#RPL*Y+1*U(BUFIN0)
#INCREMENT*B2*+1
#BSK*B2*49D#ALLOW 24 BLOCKS
#JP*MARK6#GET NEXT BLOCK
MARK8#ENT*Q*LINE20#FORMAT ERROR
#JP*RECOVER4-5#TO EXIT
#TERM*MTU*INPUT
#JP*MARK8+6*KEY1#OMIT REWIND
#EX-COM*MTU*W(CODES)*FORCE
#JP*MARK8+5+B3#WTFI
#EX-COM*MTU*W(RELEASE)*FORCE
#ENT*A*L(LOADER)#INHIBIT PRINT IF MONITOR PACKAGE
#JP*RECOVER2-5*ANOT
#RJP*STATE3#PRINT MODE NAME
#ENT*Q*LINE24#LOADED OK
#RJP*PRINT
#7774000000#DEXP
#ENT*A*W(INPUT+1)*APOS
#RJP*EEXP#EEXP
#JP*MONITOR*KEY1
#RILJP*W(INPUT+1)#TO LOADED PROGRAM
RECOVER2#RPL*Y+1*L(ERRCT)*SKIP#SET FAILED
RECOVER3#RPL*Y+1*U(ERRCT)#COUNT ERRORS
#BSK*B1*7#INCR ATTEMPTS
#JP*RECOVER4#TRY AGAIN
#BSK*B4*2#SWITCH TO ANOTHER BIAS
#JP*RECOVER4#TRY AGAIN WITH NEW BIAS
#PUT*W(RBLOD10)*W(INPUT)
#RJP*STATE3#MOD XXX OR YYYY
#ENT*A*L(ERRCT)*AZERO
#ENT*Q*LINE28*SKIP#FAILED
#ENT*Q*LINE28A#CS ERR
#EX-COM*MTU*W(RELEASE)*FORCE
#RJP*PRINT
#ENT*A*L(MANFLG)*AZERO#EXIT
#JP*MARK1*STOP
#JP*MONITOR
RECOVER4#CL*B3
#ENT*A*U(DMPFD1)*AZERO
#JP*MARK5-1#TRY MAGREL AGAIN
#EX-COM*MTU*W(BKREAD)*FORCE
RECOVER5#JP*RECOVER5+B3
#ENT*A*W(KEY)*ANEG#TEST FORMAT
#JP*MARK6
#JP*MAGREL0#TRY BLOCK IN REL FILE AGAIN
RECOVER6#CL*B3
#EX-COM*MTU*W(BKSPAFIL)*FORCE
#JP*RECOVER6+2+B3
#RPL*Y+1*U(DMPFD1)#SET MAGREL ERROR FLAG
#JP*RECOVER3
MAGREL#ENT*A*W(DMPFD1)
#STR*A*W(WORD)#SET BLOCK ADR
#CL*W(INPUT+23D)
MAGREL0#RJP*READ1540#GET MOD CODES
#ENT*B2*2#SET TO 1ST DATA WORD
#CL*B6
#ENT*B7*W(WORD)#SET BLOCK ADR
#STR*B7*W(KEYIN)
#IN*MTU*W(RELIN)#GET 20 INSTRUCTIONS + 2 CS WDS
MAGREL2#JP*MAGREL2+B3
#RJP*LOSCNTRL#TEST LOST CONTROL
#ENT*LP*20*AZERO#TEST EOF
#JP*MARK8#FORMAT ERROR
#ENT*LP*3700*AZERO
#JP*RECOVER2#TAPE ERROR
#CL*B7
MAGRELCS#ADD*A*W(INPUT+B7)
#BSK*B7*22D
#JP*MAGRELCS
#JP*RECOVER3*ANOT#BLOCK CS ERROR
#ENT*A*W(INPUT+22D)#BLOCK CS
#CP*A
#SUB*A*W(INPUT)#DROP MOD CODES FROM CS
#SUB*A*W(INPUT+1)#A IS NOW PT CS
#RPL*A+Y*W(INPUT+23D)
MAGREL1#ENT*B5*11#SET TO COUNT INSTRUCTIONS
#ENT*A*W(INPUT+B6)#GET MOD CODES
#CL*A
#LSH*AQ*3#GET MOD CODE
#STR*Q*W(INPUT+B6)#SAVE MOD CODES
#ENT*Q*W(DMPFD1)
#ENT*B7*A#MOD CODES TO B7
#JP*MAGREL3+B7
MAGREL3#JP*MAGREL7#NO MOD
#JP*MAGREL6#MOD LOWER
#JP*MAGREL5#MOD UPPER
#JP*MAGREL4#MOD LOWER AND UPPER
#JP*MAGREL10#EX-CON OR INCREMENT
#JP*MAGREL8#NOT USED YET
#JP*MAGREL8#NOT USED
#JP*MAGREL11#CHECK SUM
MAGREL4#RPL*Y+Q*LX(INPUT+B2)
MAGREL5#RPL*Y+Q*UX(INPUT+B2)*SKIP
MAGREL6#RPL*Y+Q*LX(INPUT+B2)
MAGREL7#ENT*Q*W(INPUT+B2)#MODIFIER INST
#ENT*B7*W(KEYIN)#ADDRESS TO LOAD
#RJP*CHECK
MAGREL8#RPL*Y+1*W(KEYIN)#INCREMENT ADR
#INCREMENT*B2*+1#INCREMENT DATA LOC
#BJP*B5*MAGREL1+1#NEXT DATA WORD
#BSK*B6*1#SWITCH TO NEXT WD MOD CODES
#JP*MAGREL1#NEXT 10 WORDS
MAGREL9#JP*MAGREL9+B3#WTFI
#INCREMENT*B7*+1
#STR*B7*W(WORD)#SET NEW BLOCK ADR
#JP*MAGREL0#GET 20 WDS MORE
MAGREL10#ENT*Q*L(INPUT+B2)#INCR
#RPL*Y+Q*W(KEYIN)
#ENT*B7*W(KEYIN)#REQD IF INCR IS AT END OF BLOCK
#JP*MAGREL8+1
MAGREL11#ENT*A*W(INPUT+23D)#CALCULATED CS
#SUB*A*W(INPUT+B2)#CS ON TAPE
#SUB*A*W(INPUT+B2)*AZERO
#JP#RECOVER6#TRY ENTIRE REL FILE OVER
#ENT*A*W(DMPFD1)
#ADD*A*W(RBLOD10+1)#INCR
#STR*A*W(INPUT+1)#SET EXIT ADR
#ENT*A*W(RBLOD10)
#STR*A*W(INPUT)#SET KEY
#JP*MARK8+2#PRINT LOADED OK
RELIN#U-TAG*INPUT+22D*INPUT+2#DATA BUFFER
READ1540#ENTRY*#GET 1ST 2 WORDS OF RECORD
#7761006000*#ENT*SR*C6*0*INPUT
#CL*B3
#EX-COM*MTU*W(CODES+1+B4)*FORCE#READ
#IN*MTU*W(BUFIN0)#GET KEY OR LIMITS
READ1540A#JP*READ1540A+B3*MTUWAIT
#EXIT*
LOSCNTRL#ENTRY*#LOSS OF CONTROL OR IMP COND
#ENT*Q*W(STATUS)
#ENT*LP*20000*AZERO
#JP*STATE1#NOT IN CONTROL
#ENT*LP*40000*AZERO
#JP*STATE5#IMP COND
#EXIT*
CS#ENTRY*#READ CS ON TAPE
#77610*06000#ENT*SR*C6*0*INPUT
#IN*MTU*W(CS4)
CS1#JP*CS1+B3#WTFI
#CL*B3
#EXIT*
CS2#0*
CS3#0*
CS4#U-TAG*CS3*CS2
BUFIN#U-TAG*INPUT+1*INPUT
BUFIN0#U-TAG*INPUT+1*INPUT
STATE1#ENT*Q*LINE25*SKIP#NOT IN CONTROL
STATE2#ENT*Q*LINE26#KEY OF 0 IS ILLEGAL
#JP*RECOVER4-5
STATE3#ENTRY*#SELECT PROPER PRINTOUT
#RJP#CRLF
#ENT*Q*X77700
#ENT*A*W(INPUT)*APOS#TEST NEG
#ENT*A*41*SKIP
#CL*A
#RSE*SU*W(LINE22)
#ENT*Q*W(INPUT)*QPOS#KEY READ IN
#CP*Q
#RJP*ICH7
#STR*A*Q
#CL*A
#ENT*B1*4
STATE6#LSH*AQ*6#SUPRESS MS ZEROS
#SEL*CL*60*AZERO
#SEL*SET*60
#BJP*B1*STATE6
#STR*A*Q#Q KEY
#ENT*A*U(MANFLG)*ANOT#TEST TYPE PRINTOUT
#ENT*Q*W(SEARCH3)*SKIP#CHARS
#ENT*A*LINE22*SKIP#MOD XX
#ENT*A*LINE22+1#OMIT MOD
#STR*Q*W(LINE22+1)#STORE KEY OR CHARS
#LSH*AQ*30D
#RJP*PRINT
#EXIT*
STATE5#ENT*Q*LINE27*SKIP#IMP COND
STATE7#ENT*Q*LINE29#CANT FIND
#JP*RECOVER4-5
STATE8#ENTRY*#GET BASE ADR
#ENT*Q*LINE10#BASE ADDRESS
#RJP*PRINT
#RJP*NUMBERA
#STR*A*W(DMPFD1)#BASE
#EXIT*
CODES#1*44011#RD THD 1
#2300*#NORM READ
#2310*#READ LOW BIAS
#2320*#READ HIGH BIAS
RELEASE#2*11#RELEASE CONTROL
SPACFIL#16300*#SPACE FILE
BKREAD#1*2300#BACK READ
BKSPAFIL#1*16300#BACK SPACE FILE
KEY#0*
ERRCT#0*
MANFLG#0*
STATUS#0*
MAGINT#ENTRY*
#STR*MTU*W(STATUS)
#ENT*B3*1#SET INT FLAG
#RILJP*L(MAGINT)
INPUT#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
#0*
LAST#0*
..
CHAN#PROGRAM*MENNINGEN*9NOV1967
CHAN#SIL*ALL
#7774000000*#DEXP
#ENT*Q*LINECHAN#LOAD MAG TAPE FROM CHAN
#RJP*PRINT
#ENT*B1*6
#RJP*NUMBER
#CL*B1
#ENT*Q*X77777#A SIGN
CHAN1#COM*MASK*B1*ANOT
#JP*CHAN2
#BSK*B1*17
#JP*CHAN1
#JP*CHAN
CHAN2#STR*A*L(CHAN)
#LSH*A*24
#ENT*Q*W(CHAN3)*SKIP
CHAN3#7703777777*
#RSE*SU*W(REQUEST+1)#SET CHAN INSTRUCTIONS
#RSE*SU*W(REQUEST+2)
#RSE*SU*W(MARK3+3)
#RSE*SU*W(MARK5-1)
#RSE*SU*W(MARK7-1)
#RSE*SU*W(MARK7)
#RSE*SU*W(MARK8+2)
#RSE*SU*W(MARK8+4)
#RSE*SU*W(MARK8+6)
#RSE*SU*W(RECOVER4-5)
#RSE*SU*W(RECOVER4+3)
#RSE*SU*W(RECOVER6+1)
#RSE*SU*W(MAGREL2-1)
#RSE*SU*W(READ1540A-2)
#RSE*SU*W(READ1540A-1)
#RSE*SU*W(READ1540A)
#RSE*SU*W(CS1-1)
#RSE*SU*W(MAGINT+1)
#ENT*A*L(CHAN)
#ADD*A*20
#STR*A*L(MARK2+1)#SET INT ENT ADR
#ENT*A*L(CHAN)
#LSH*A*9D
#ENT*Q*X60777
#RSE*SU*W(READ1540+1)
#RSE*SU*W(CS+1)
#RSE*SU*W(MARK6+4)
#JP*MONITOR
LINECHAN#0403311516*#THIS IS CHAN
#3005163005*#SET MONITOR TO LOAD FROM CHAN
#1015062304*
#0330123105*
#2224231631*
#2427053124*
#0521240611*
#0510150623*
#0530577*
..




